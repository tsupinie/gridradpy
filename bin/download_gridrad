#!/usr/bin/env python

from gridradpy import GridRadDownloader

import argparse
from pathlib import Path
from datetime import datetime, timedelta
import re


def iter_dt(dt_start: datetime, dt_stop: datetime, td_step: timedelta):
    dt = dt_start
    while dt <= dt_stop:
        yield dt
        dt = dt + td_step
    

def main():
    def parse_datetime(dt_str):
        return datetime.strptime(dt_str, '%Y%m%d_%H%M')

    def parse_timedelta(td_str):
        periods = ['years', 'months', 'days', 'hours', 'minutes', 'seconds']
        match = re.match('P(?:([\d.]+)Y)?(?:([\d.]+)M)?(?:([\d.]+)D)?(?:T(?:([\d.]+)H)?(?:([\d.]+)M)?(?:([\d.]+)S)?)?', td_str)

        try:
            dct = {p: int(n) if n is not None else 0 for p, n in zip(periods, match.groups())}
        except AttributeError:
            raise ValueError(f"Could not parse '{td_str}' as a timedelta")

        dct['days'] += 365 * dct.pop('years')
        dct['days'] += 30 * dct.pop('months')

        return timedelta(**dct)

    ap = argparse.ArgumentParser()
    ap.add_argument('--email', dest='email', required=True, 
                    help="Email address to use for authentication in the UCAR RDA")
    ap.add_argument('--dt-start', dest='dt_start', type=parse_datetime, required=True, 
                    help="Start time for data download (YYYYMMDD_HHMM format)")
    ap.add_argument('--dt-end', dest='dt_end', type=parse_datetime, required=True, 
                    help="End time for data download (YYYYMMDD_HHMM format)")
    ap.add_argument('--td-step', dest='td_step', type=parse_timedelta, default=timedelta(minutes=5), 
                    help="Time step for data download (ISO 8601 format; defaults to 'PT5M', or 5 minutes)")
    ap.add_argument('--out-path', dest='out_path', type=Path, default=Path('.'),
                    help="Path to download data to (defaults to the current directory)")
    ap.add_argument('--force-download', dest='force', action='store_true',
                    help="If specified, overwrite files already downloaded; otherwise, skip previously downloaded files")

    args = ap.parse_args()

    grd = GridRadDownloader()
    grd.login(args.email, auth_path=args.out_path)

    try:
        for dt in iter_dt(args.dt_start, args.dt_end, args.td_step):
            fname = args.out_path / f'nexrad_3d_v4_2_{dt:%Y%m%dT%H%M%S}Z.nc'

            if not fname.exists() or args.force:
                grd.download_file(dt, fname)
    except:
        print()
        raise


if __name__ == '__main__':
    main()